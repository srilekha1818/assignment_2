1. WAP to find the duplicates present in an array.
public class Duplicates {
    public static void main(String[] args){
        int [] ar={7,5,5,3,8,1,8,2,5,8};
        System.out.print("duplicate elements in the array are: ");
        for(int i=0;i<ar.length-1;i++){
            for(int j=i+1;j<ar.length;j++){
                if(ar[i]==ar[j] ){  
                    System.out.print(ar[j]+" ");   
                }

            }
            
        }


    }
}

2. WAP to sort an array using Quick Sort Algorithm.


import java.util.*;

class QuickSort{

	
	static void swap(int[] arr, int i, int j)
	{
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}

	
	static int partition(int[] arr, int low, int high)
	{

		
		int pivot = arr[high];

		
		int i = (low - 1);

		for (int j = low; j <= high - 1; j++) {

			if (arr[j] < pivot) {

				
				i++;
				swap(arr, i, j);
			}
		}
		swap(arr, i + 1, high);
		return (i + 1);
	}

	
	static void quickSort(int[] arr, int low, int high)
	{
		if (low < high) {

			
			int pi = partition(arr, low, high);

			
			quickSort(arr, low, pi - 1);
			quickSort(arr, pi + 1, high);
		}
	}

	
	static void printArray(int[] arr, int size)
	{
		for (int i = 0; i < size; i++)
			System.out.print(arr[i] + " ");

		System.out.println();
	}

	
	public static void main(String[] args)
	{
		int[] arr = { 10, 7, 8, 9, 1, 5 };
		int n = arr.length;

		quickSort(arr, 0, n - 1);
		System.out.println("Sorted array: ");
		printArray(arr, n);
	}
}


3. WAP to sort an array using Bubble Sort Algorithm.
public class BubbleSort{
    public static void main(String[] args){
        int [] ar={7,5,3,8,1,2,8};
        int temp;
        for(int i=0;i<ar.length;i++){
            for(int j=1;j<ar.length-i;j++){
                if(ar[j-1]>ar[j]){
                    temp=ar[j];
                    ar[j]=ar[j-1];
                    ar[j-1]=temp;

                }

            }
        }
        System.out.print("sorted array: ");
        for(int ele:ar){
            System.out.print(ele+" ");
        }

    }
}
4. WAP to sort an array using Selection Sort Algorithm.


import java.util.*;
public class SelectionSort
{
	void sort(int arr[])
	{
		int n = arr.length;

		
		for (int i = 0; i < n-1; i++)
		{
		
			int min_idx = i;
			for (int j = i+1; j < n; j++)
				if (arr[j] < arr[min_idx])
					min_idx = j;

			
			int temp = arr[min_idx];
			arr[min_idx] = arr[i];
			arr[i] = temp;
		}
	}

	
	void printArray(int arr[])
	{
		int n = arr.length;
		for (int i=0; i<n; ++i)
			System.out.print(arr[i]+" ");
		System.out.println();
	}

	
	public static void main(String args[])
	{
		SelectionSort ob = new SelectionSort();
		int arr[] = {64,25,12,22,11};
		ob.sort(arr);
		System.out.println("Sorted array");
		ob.printArray(arr);
	}
}


5. WAP to sort an array using Merge Sort Algorithm.


class MergeSort {
	
	void merge(int arr[], int l, int m, int r)
	{
		
		int n1 = m - l + 1;
		int n2 = r - m;
                int L[] = new int[n1];
		int R[] = new int[n2];

		
		for (int i = 0; i < n1; ++i)
			L[i] = arr[l + i];
		for (int j = 0; j < n2; ++j)
			R[j] = arr[m + 1 + j];

		

		
		int i = 0, j = 0;
                int k = l;
		while (i < n1 && j < n2) {
			if (L[i] <= R[j]) {
				arr[k] = L[i];
				i++;
			}
			else {
				arr[k] = R[j];
				j++;
			}
			k++;
		}

		
		while (i < n1) {
			arr[k] = L[i];
			i++;
			k++;
		}

	
		while (j < n2) {
			arr[k] = R[j];
			j++;
			k++;
		}
	}

	
	void sort(int arr[], int l, int r)
	{
		if (l < r) {
			
			int m = l + (r - l) / 2;

			
			sort(arr, l, m);
			sort(arr, m + 1, r);

			
			merge(arr, l, m, r);
		}
	}

	
	static void printArray(int arr[])
	{
		int n = arr.length;
		for (int i = 0; i < n; ++i)
			System.out.print(arr[i] + " ");
		System.out.println();
	}

	
	public static void main(String args[])
	{
		int arr[] = { 12, 11, 13, 5, 6, 7 };

		System.out.println("Given Array");
		printArray(arr);

		MergeSort ob = new MergeSort();
		ob.sort(arr, 0, arr.length - 1);

		System.out.println("\nSorted array");
		printArray(arr);
	}
}

6. WAP to check whether an array is a subset of another array.


class Subset {

	static boolean isSubset(int arr1[], int arr2[], int m,
							int n)
	{
		int i = 0;
		int j = 0;
		for (i = 0; i < n; i++) {
			for (j = 0; j < m; j++)
				if (arr2[i] == arr1[j])
					break;

			
			if (j == m)
				return false;
		}

		
		return true;
	}

	
	public static void main(String args[])
	{
		int arr1[] = { 11, 1, 13, 21, 3, 7 };
		int arr2[] = { 11, 3, 7, 1 };

		int m = arr1.length;
		int n = arr2.length;

		if (isSubset(arr1, arr2, m, n))
			System.out.print("arr2[] is "
							+ "subset of arr1[] ");
		else
			System.out.print("arr2[] is "
							+ "not a subset of arr1[]");
	}
}




